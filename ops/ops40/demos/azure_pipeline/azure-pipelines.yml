trigger:

  branches:
    include:
    - master
  paths:
    include:
    - 'ops/ops40'

pr:
- master

variables:

  # Azure
  azureSubscription: azure-service-connection

  # AKS Container Registry
  containerRegistryName: ttacrbwabnsh2peots
  containerRegistryFqdn: ttacrbwabnsh2peots.azurecr.io

  # AKS Pre-Production
  aks-cluster-rg-pre-prod: OPS40-DEMO-044
  aks-cluster-pre-prod: tailwindtradersaksbwabnsh2peots
  ingress-pre-prod: 59394250b6104cc18c6b.eastus.aksapp.io

  # Production
  aks-cluster-rg: OPS40-DEMO-044
  aks-cluster: tailwindtradersaksbwabnsh2peots
  ingress: 59394250b6104cc18c6b.eastus.aksapp.io

stages:

- stage: test
  jobs:
  - job:

    variables:
      hostDB: https://ttshoppingdbbwabnsh2peots.documents.azure.com:443/

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: PowerShell@2
      displayName: Install Pester
      inputs:
        targetType: 'inline'
        script: |
          Find-Module pester | Install-Module -Force

    - task: AzureCLI@1
      displayName: Generate values file for test
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: 'inlineScript'
        inlineScript: |
          pwsh ./ops/deployment/helm-values/generate-config.ps1 -resourceGroup $(aks-cluster-rg-pre-prod) -sqlPwd Password2020! -gvaluesTemplate ops/deployment/helm-values/gvalues.template -outputFile ./values.yaml

    - task: PowerShell@2
      displayName: Parse host name
      inputs:
        targetType: 'inline'
        script: |
          $content = Get-Content values.yaml
          $hostName = $content[37].split(" ")[7]

    - task: PowerShell@2
      displayName: Run Pester tests
      inputs:
        targetType: 'inline'
        script: 'invoke-pester -Script @{ Path = ''./ops/ops40/demos/azure_pipeline/tests/''; Parameters = @{ hostName = ''$(hostDB)'' }} -OutputFile "./test-results.xml" -OutputFormat ''NUnitXML'''

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/test-results.xml'
        failTaskOnFailedTests: true

- stage: build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: helm

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(containerRegistryName)'

    - task: HelmDeploy@0
      displayName: 'helm init --client-only'
      inputs:
        connectionType: None
        command: init
        arguments: '--client-only'

    - task: HelmDeploy@0
      displayName: 'helm package (tt-cart)'
      inputs:
        command: package
        chartPath: 'ops/ops40/demos/tailwind-cart-api/cart-api'
        arguments: '--version $(Build.BuildId)'

    - task: AzureCLI@1
      displayName: 'AZ ACR helm push (tt-cart)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr helm push -n $(containerRegistryName) /home/vsts/work/1/a/cart-api-$(Build.BuildId).tgz'

  - job: docker

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(containerRegistryName)'

    - task: CmdLine@2
      displayName: 'docker build (tt-cart)'
      inputs:
        script: |
          cd ops/ops40/demos/tailwind-cart-api/Tailwind.Traders.Cart.Api
          docker build -t $(containerRegistryFqdn)/cart.api:$(Build.BuildId) .

    - task: CmdLine@2
      displayName: 'docker push (tt-web)'
      inputs:
        script: |
          docker push $(containerRegistryFqdn)/cart.api:$(Build.BuildId)

  - job: artifacts
    dependsOn:
    - helm
    - docker

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '/home/vsts/work/1/s'
        artifactName: 'drop'

- stage: release_pre_production
  jobs:
  - deployment: release_pre_production
    displayName: Release Pre-Production
    pool:
      name: Hosted Ubuntu 1604
    environment: pre-production
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: drop
            patterns: '**/*'

          - task: HelmDeploy@0
            displayName: 'helm init --client-only'
            inputs:
              connectionType: None
              command: init
              arguments: '--client-only'

          - task: AzureCLI@1
            displayName: Deploy Pre-Production
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: 'inlineScript'
              inlineScript: |
                az extension add -n application-insights
                az acr login --name $(containerRegistryName)
                az acr helm repo add --name $(containerRegistryName)
                az aks get-credentials --name $(aks-cluster-pre-prod) --resource-group $(aks-cluster-rg-pre-prod) --admin
                pwsh /home/vsts/work/1/drop/ops/deployment/helm-values/generate-config.ps1 -resourceGroup $(aks-cluster-rg-pre-prod) -sqlPwd Password2020! -gvaluesTemplate /home/vsts/work/1/drop/ops/deployment/helm-values/gvalues.template -outputFile values.yaml
                kubectl delete configmap cfg-my-tt-cart
                helm upgrade my-tt-cart $(containerRegistryName)/cart-api --install -f values.yaml --set ingress.hosts={$(ingress-pre-prod)} --set image.repository=$(containerRegistryFqdn)/cart.api --set image.tag=$(Build.BuildId)

- stage: release_production
  jobs:
  - deployment: release_production
    displayName: Release Production
    pool:
      name: Hosted Ubuntu 1604
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: drop
            patterns: '**/*'

          - task: HelmDeploy@0
            displayName: 'helm init --client-only'
            inputs:
              connectionType: None
              command: init
              arguments: '--client-only'

          - task: AzureCLI@1
            displayName: Deploy Production
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: 'inlineScript'
              inlineScript: |
                az extension add -n application-insights
                az acr login --name $(containerRegistryName)
                az acr helm repo add --name $(containerRegistryName)
                az aks get-credentials --name $(aks-cluster) --resource-group $(aks-cluster-rg) --admin
                pwsh /home/vsts/work/1/drop/ops/deployment/helm-values/generate-config.ps1 -resourceGroup $(aks-cluster-rg-pre-prod) -sqlPwd Password2020! -gvaluesTemplate /home/vsts/work/1/drop/ops/deployment/helm-values/gvalues.template -outputFile values.yaml
                kubectl delete configmap cfg-my-tt-cart-cart-api
                helm upgrade my-tt-cart $(containerRegistryName)/cart-api --install -f values.yaml --set ingress.hosts={$(ingress-pre-prod)} --set image.repository=$(containerRegistryFqdn)/cart.api --set image.tag=$(Build.BuildId)